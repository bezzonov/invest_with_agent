import streamlit as st
import pandas as pd
import time

from datetime import datetime, timedelta
from scripts.actual_shares_list import shares_list
from scripts.config import stock_info, model_info, model_params
from scripts.shares_fig import plot_price_chart
from scripts.connection import connection
from scripts.metrics import show_metrics, calc_metrics
from scripts.data_filling import fill_data
from scripts.model_train_pred import model_train_predict

st.set_page_config(
page_title="RL Trade Agent",
page_icon="üìà",
layout="centered"
)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if "page" not in st.session_state:
    st.session_state.page = "main"
if "selected_stocks" not in st.session_state:
    st.session_state.selected_stocks = []
if "current_stock" not in st.session_state:
    st.session_state.current_stock = None
if "training_result" not in st.session_state:
    st.session_state.training_result = None

def main_page():
    st.title("üìà| RL Trade Agent")
    st.markdown("#### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏")

    stocks = None
    capital = None
    start_date, end_date = None, None
    selected_model = None
    selected_params = None

    if "selected_stocks" not in st.session_state:
        st.session_state.selected_stocks = []
    if "selected_model" not in st.session_state:
        st.session_state.selected_model = None
    if "training_result" not in st.session_state:
        st.session_state.training_result = None

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–µ
    with st.form("stock_form"):
        selected = st.multiselect(
            "–ê–∫—Ü–∏–∏",
            options=list(shares_list.keys()),
            format_func=lambda x: f"{shares_list[x]} ({x})",
            default=st.session_state.selected_stocks,
            placeholder ='–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏–∏'
        )

        capital = st.number_input("–ö–∞–ø–∏—Ç–∞–ª –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (—Ä—É–±.)", min_value=10000, max_value=5_000_000, step=10000, value=100_000)
        col1, col2 = st.columns(2)

        min_start_date = datetime.today() - timedelta(days=365*10)
        max_start_date = datetime.today() - timedelta(days=7)
        min_end_date = datetime.today() - timedelta(days=365*10) + timedelta(days=7)
        max_end_date = datetime.today()

        with col1:
            start_date = st.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞",
                                       value=datetime.today() - timedelta(days=7),
                                       min_value=min_start_date.date(),
                                       max_value=max_start_date.date())
        with col2:
            end_date = st.date_input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è",
                                     value=datetime.today(),
                                    min_value=min_end_date.date(),
                                    max_value=max_end_date.date())

        selected_model = st.selectbox(
            "–ú–æ–¥–µ–ª—å",
            options=list(model_info.keys()),
            index=list(model_info.keys()).index(st.session_state.selected_model) if st.session_state.selected_model in model_info else 0
        )
        st.session_state.selected_model = selected_model

        submitted = st.form_submit_button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä")

# -----------------------------------------------------------------------------------------------------------------------------------

    if submitted:
        if not selected:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∞–∫—Ü–∏—é.")
        elif not selected_model:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å.")
        elif start_date < min_start_date.date() or start_date > max_start_date.date():
            st.error(f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å {min_start_date.strftime('%d.%m.%Y')} –ø–æ {max_start_date.strftime('%d.%m.%Y')}")
        elif end_date < min_end_date.date() or end_date > max_end_date.date():
            st.error(f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å {min_end_date.strftime('%d.%m.%Y')} –ø–æ {max_end_date.strftime('%d.%m.%Y')}")
        elif start_date > end_date:
            st.error("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
        elif (end_date - start_date).days < 7:
            st.error("–í—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (–æ—Ç 7 –¥–Ω–µ–π)")
        else:
            st.session_state.selected_stocks = selected
            st.session_state.capital = capital
            st.session_state.start_date = start_date
            st.session_state.end_date = end_date
            st.rerun()

    if st.session_state.selected_stocks:
        st.success("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        stocks = st.session_state.selected_stocks
        for i in range(0, len(stocks), 2):
            cols = st.columns(2)
            ticker = stocks[i]
            name = shares_list[ticker]
            if cols[0].button(f"{name} ({ticker})", key=ticker):
                st.session_state.current_stock = ticker
                st.session_state.page = "detail"
                st.rerun()

            if i + 1 < len(stocks):
                ticker = stocks[i + 1]
                name = shares_list[ticker]
                if cols[1].button(f"{name} ({ticker})", key=ticker + "_right"):
                    st.session_state.current_stock = ticker
                    st.session_state.page = "detail"
                    st.rerun()

        show_metrics({'–ö–∞–ø–∏—Ç–∞–ª': f"{capital} —Ä—É–±.",
                      '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞': start_date,
                      '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è': end_date,
                      })

        if st.button(f"{selected_model}"):
            st.session_state.page = "model_detail"
            st.rerun()
    else:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏.")

# ------------------------------------------------------
    st.markdown("#### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏")
    params = model_params[selected_model]

    for key, param in params.items():
        if key not in st.session_state:
            st.session_state[key] = param.get("value", param.get("options", [None])[0])

    with st.form("model_params_form"):
        cols = st.columns(2)
        col_index = 0

        for key, param in params.items():
            with cols[col_index]:
                if param["type"] == "number_input":
                    st.number_input(
                        param["label"],
                        min_value=param["min_value"],
                        max_value=param["max_value"],
                        step=param["step"],
                        format=param.get("format"),
                        help=param['help'],
                        key=key
                    )
                elif param["type"] == "slider":
                    st.slider(
                        param["label"],
                        min_value=param["min_value"],
                        max_value=param["max_value"],
                        step=param["step"],
                        format=param.get("format"),
                        help=param['help'],
                        key=key
                    )
                elif param["type"] == "selectbox":
                    st.selectbox(
                        param["label"],
                        options=param["options"],
                        help=param['help'],
                        key=key
                    )
            col_index = (col_index + 1) % 2

        submitted_params = st.form_submit_button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä")

    if submitted_params:
        selected_params = {key: st.session_state[key] for key in params.keys()}
        st.session_state.selected_params = selected_params
        st.success("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        df_params = pd.DataFrame.from_dict(selected_params, orient='index', columns=['–ó–Ω–∞—á–µ–Ω–∏–µ'])
        df_params.index.name = '–ü–∞—Ä–∞–º–µ—Ç—Ä'
        st.dataframe(df_params, use_container_width=True)
    else:
        if "selected_params" in st.session_state:
            st.success("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            df_params = pd.DataFrame.from_dict(st.session_state.selected_params, orient='index', columns=['–ó–Ω–∞—á–µ–Ω–∏–µ'])
            df_params.index.name = '–ü–∞—Ä–∞–º–µ—Ç—Ä'
            st.dataframe(df_params, use_container_width=True)
        else:
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏.")

    st.markdown("#### –¢–æ—Ä–≥–æ–≤–ª—è —Å –∞–≥–µ–Ω—Ç–æ–º")

    # # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è stocks, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ –∞–∫—Ü–∏–π
    # if "stocks" not in st.session_state:
    #     st.session_state.stocks = None  # –ò–ª–∏ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π

    # stocks = st.session_state.stocks

    if st.button("üöÄ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", key="big_train_button"):
        if stocks is None:
            st.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∞–∫—Ü–∏—é.')
        elif "selected_params" not in st.session_state:
            st.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏.')
        else:
            with st.spinner(f"–ê–≥–µ–Ω—Ç –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é, –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω –≤ {datetime.now().time().strftime('%H:%M:%S')}."):
                st.info('–í —Å—Ä–µ–¥–Ω–µ–º –∞–≥–µ–Ω—Ç—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–∫–æ–ª–æ 7 –º–∏–Ω—É—Ç –Ω–∞ –ø–æ–¥–±–æ—Ä –ª—É—á—à–µ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –æ–¥–Ω–∞–∫–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.')
                try:
                    result = model_train_predict(stocks, capital, start_date, end_date, selected_model, st.session_state.selected_params)
                    st.session_state.training_result = result
                except MemoryError:
                    st.warnings('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

    # if "selected_params" in st.session_state:
    #     st.markdown("### –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    #     st.json(st.session_state.selected_params)




# ------------------------------------------------------------------------

def model_detail_page():
    st.markdown(f"### {st.session_state.selected_model}")
    st.text_area("–û –º–æ–¥–µ–ª–∏", model_info.get(st.session_state.selected_model, "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."), height=400)

    if st.button("–ù–∞–∑–∞–¥"):
        st.session_state.page = "main"
        st.rerun()

def detail_page():
    ticker = st.session_state.current_stock
    st.markdown(f"### {shares_list[ticker]} ({ticker})")
    info = stock_info.get(ticker, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    st.text_area("–û –∫–æ–º–ø–∞–Ω–∏–∏", info[0], height=150)
    st.plotly_chart(plot_price_chart(connection(),
                                             ticker,
                                             'hour_shares_data',
                                             datetime.strftime(datetime.today() - timedelta(days=60),'%Y-%m-%d')),
                                             on_select="rerun"
                                               )
    show_metrics(calc_metrics(connection(),
                            ticker,
                            'hour_shares_data',
                             datetime.strftime(datetime.today() - timedelta(days=400),'%Y-%m-%d')
                            ))


    if st.button("‚Üê –ù–∞–∑–∞–¥"):
        st.session_state.page = "main"
        st.rerun()

if st.session_state.page == "main":
    main_page()
elif st.session_state.page == "detail":
    detail_page()
elif st.session_state.page == "model_detail":
    model_detail_page()